*mixer.txt*  Extras and extensions for *elixir*

Author:  Andrew Haust <https://andrew.hau.st>
License: Same terms as Vim itself (see |license|)


TABLE OF CONTENTS                           *mixer*

INTRODUCTION .............................| |mixer-introduction|
TEXT OBJECTS .............................| |mixer-text-objects|
  * Maps .................................| |mixer-maps|
  * Functions ............................| |mixer-functions|
  * Sigils ...............................| |mixer-sigils|
  * Comments .............................| |mixer-comments|
  * options ..............................| |mixer-text-objects-options|
MIX ......................................| |mixer-mix|
  * COMMANDS .............................| |mixer-mix-commands|
  * Navigation ...........................| |mixer-navigation|


INTRODUCTION                                *mixer-introduction*

Provides utilities for working with the Elixir programming language
<https://elixir-lang.org>.  For Vim users, this compliments elixir.vim
<https://github.com/elixir-lang/vim-elixir>.  This plugin is designed to work
with nvim as well, though nvim users may also want to evaluate
elixir-tools.nvim <https://github.com/elixir-tools/elixir-tools.nvim>.  This
plugin can be used along-side it.


TEXT OBJECTS                                *mixer-text-objects*
                                            *mixer-text-object*
                                            *mixer-textobj*

Text objects are defined for general Elixir blocks (do/end, fn/end), as well
as maps, sigils, and comments/docstrings.  There are some specialized objects
for the def* family of macros where the 'a' versions include meta like
specs, docstrings, etc.

Here is an overview:


  Elixir construct    | Text Object  (mneumonic/notes)
  --------------------+------------------------------------------
  do/end blocks       | d  (do)
  def[p]/defmarco[p]  | f
  def[p]/defmacro[p]  | F  (includes meta and all function heads)
  defmodule           | M
  %{}/%Foo{}          | m  (map)
  ~s""/etc.           | ~  (note the uppercase)
  #/@doc """/etc      | c  (comment)



                    do/end blocks~
id                                          *mixer-ie* *mixer-ae*
ad                  A do/end block.  Currently brings "else" along with it.

                    These target all the builtin macros/special forms and work
                    well with them.  They are also designed to be general, so
                    should work with most custom macros.

                    Currently, with code written like so:
>
                      let foo = if condition? do
                        bar()
                      end
<
                    the "let foo = " will be included in "ad".


                    function and macro definitions~
if                                          *mixer-if* *mixer-af*
af                                          *mixer-iF* *mixer-aF*
iF
aF                  A function including `def`, `defp`, `defmacro`, and  `defmacrop`.

                    "aF" will include docstrings, specs, comments, and other
                    meta as well as all function heads.  "af" only targets the
                    function itself.  There is no difference between "if" and
                    "aF" though the latter exists for convenience.


                    module definitions~
iM                                          *mixer-iM* *mixer-aM*
aM                  A module definition.


                    maps and structs~
im                                          *mixer-im* *mixer-am*
am
Im
Am                  A map or struct.  The rather unconvention "Im" and "Am"
                    versions will target the most outer map or struct.


                    sigils~
iS                                          *mixer-i~* *mixer-a~*
aS                  A sigil.  Works regardless of the delimiter.


                    comments~
ic                                          *mixer-ic* *mixer-ac*
ac                  A comment.  Mostly just useful for formatting when
                    a comment is touching some code.

                                            *mixer-text-objects-options*
By default, text objects use the "seek" behavior.  This means if you type
`daf` outside of a function, it will delete the next function searching
downward.  You may turn this off with the following setting:
>
  let g:mixer_textobj_seek = ""
<
Now your cursor must be on an object to operate on it.

Fine-grained control over which objects use seek is possible by providing
a comma comma-separate string where the possible values are:
>
  let g:mixer_textobj_seek_block = "doend,module,map,sigil,comment"
<
This is the default.


COMMANDS                                    *mixer-commands*

                    Mix~
                                            *mixer-commands-mix*
                                            *mixer-:Mix*
                                            *:Mix*
:Mix[!] [args]      Run a mix command with autocomplete.  Uses |dispatch| if
                    available.

                    You can specifify the environment like so:
>
                      :Mix -test mix compile
<
                    This works for any environment you have specified outside
                    the standard "dev", "test", and "prod".  When called with
                    a bang [!], it will run the task in both dev and test
                    envs.

                                            *mixer-:Deps* *:Deps*
:{range}Deps {task} {args}
                    A wrapper around `mix deps` with some added functionality.

                    The default {task} is `get`.

                    If the current buffer is `mix.exs` it will write it if
                    it's been modified.

                    The standard tasks are available as well as a special
                    `-add` task.  This allows you to add deps to your mix.exs
                    by placing your cursor above where you would like to add
                    it and invoking:
>
                      :Deps -add live_view
<
                    This is only available if the current buffer is `mix.exs`,
                    though it will not check to see if your cursor is in the
                    right place.

                    Given a {range}, it will operate on those lines.  For
                    example, given this line:
>
                      {:live_view, "~> 0.20"},
<
                    You could call `mix update live_view` like so:
      >
                      :.Deps update
<
                    The following lines visually selected:
>
                      {:floki, "~> 0.3"},
                      {:phoenix_test, "~> 1.7"},
                      {:pathex, "~> 2.5"},
                      {:image, "~> 0.5"}
<
                    Running
>
                      :.Deps update
<
                    will result in:
>
                      mix deps update floki phoenix_test pathex image
<

                                            *mixer-:Migrate* *:Migrate*
:Migrate[!]         Run migrations

                    With a bang, will run in both dev and test environments.


                                            *mixer-:Rollback* *:Rollback*
:Rollback[!]        Rollback migrations

                    With a bang, will run in both dev and test environments.


                                            *mixer-:Generate* *:Generate*
:Generate           Unified generator command with autocomplete.

                    Run any "*.gen.*" task in your project without namesapce.

                    For example:
>
                      :Generate live Accounts User users name:string age:integer
                      :Generate migration add_name_to_users
<

                    Naming collisions are resolved by appending the package
                    prefix in square brackets to the duplicate tasks.

                    Only available when the current working directory is part
                    of a mix project.

  vim:tw=78:et:ft=help:norl:
