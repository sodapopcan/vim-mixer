*elixir-ext.txt*  Extras and extensions for *elixir*

Author:  Andrew Haust <https://andrew.hau.st>
License: Same terms as Vim itself (see |license|)

This plugin depends on elixir.vim
                       <https://github.com/elixir-editors/vim-elixir>

TABLE OF CONTENTS                           *elixir-ext*

INTRODUCTION................................|elixir-ext-introduction|
TEXT OBJECTS................................|elixir-ext-text-objects|
  * Maps....................................|elixir-ext-maps|
  * Functions...............................|elixir-ext-functions|
  * Sigils..................................|elixir-ext-sigils|
  * Comments................................*elixir-ext-comments*
COMMANDS....................................|elixir-ext-commands|
 * Mix......................................|elixir-ext-commands-mix|
 * Editing..................................|elixir-ext-commands-editing|


INTRODUCTION                                *elixir-ext-introduction*

Provides extra utilities on top of elixir.vim for working with the
Elixir programming language <https://elixir-lang.org>.


TEXT OBJECTS                                *elixir-ext-text-objects*
                                            *elixir-ext-text-object*
                                            *elixir-ext-textobj*

Text objects are defined for general Elixir blocks (do/end, fn/end), as well
as maps, sigils, and comments/docstrings.  There are some specialized objects
for the def* family of macros where the 'a' versions include meta like
specs, docstrings, etc.

Here is an overview:


      Elixir construct             | Text Object  (mneumonic/notes)
      -----------------------------+----------------------------
      do/end blocks                | d  (as in "do")
      def/defp/defmacro/defmacrop  | f
      def/etc. without meta        | F
      defmodule                    | M
      %{}                          | m
      ~s""/etc.                    | S  (note it's uppercase)
      #/@doc """/etc               | c  (comment)



id                                          *elixir-ext-ie* *elixir-ext-ae*
ad                  A do/end block.  Currently brings "else" along with it.

                    These target all the builtin macros/special forms and work
                    well with them.  They are also designed to be general, so
                    should work with most custom macros.

                    Currently, with code written like so:
>
                      let foo = if condition? do
                        bar()
                      end
<
                    the "let foo = " will be included in "ae".


if                                          *elixir-ext-if* *elixir-ext-af*
af                                          *elixir-ext-iF* *elixir-ext-aF*
iF
aF                  A def macro including def, defp, defmacro, defmacrop,
                    defprotocol, and defimpl.  Useful for not having to worry
                    about being inside another block.

                    "af" will include docstrings, specs, comments, and other
                    meta.  This will only work so long as there are no blank
                    lines with the excpetion of within a docstring.  The "aF"
                    variant will only include the function itself.  "iF" is
                    included for convenience but is identical to "aF".

                    Additionally, "af"/"aF" will include either its trailing
                    blank line or its leading blank line in that order.


iM                                          *elixir-ext-iM* *elixir-ext-aM*
aM                  A module, ie, defmodule/end.  Useful for not
                    having to worry about being inside another block.


ic                                          *elixir-ext-ic* *elixir-ext-ac*
ac                  A comment or docstring.  It will target whichever your
                    cursor is on or ahead of.

im                                          *elixir-ext-im* *elixir-ext-am*
im                  An map.

EDITING                                     *elixir-ext-editing*

                                            *elixir-ext-pipes*
                    NOTE: These commands depend on *elixir.vim*

                    NOTE: These commands only work for functions called with
                    parens.  A special case is made for `case`.

                    This plugin provides two commands for manipulating pipes:
                    |:FromPipe| and |:ToPipe|.  While it's quite robust it is
                    not perfect and will need to be formatted.  This is mostly
                    only true if un-piping a multiline data-structure.

                    For example:
>
                      %{
                        bar: baz()
                      }
                      |> foo("biz")
<
                    will become:
>
                      foo(
                        %{
                          bar: baz()
                        }, "biz")
<

                    But for simplier cases it works quite well, even with more
                    complex datastructres.  It is even aware of infix
                    operators, so you can actually convert between:
>
                      1 + 1
<
                    and
>
                      1
                      |> Kernel.+()
<

COMMANDS                                    *elixir-ext-commands*

:FromPipe[!]        Moves a piped argument into function parens.

                    The bang version will attempt to format.

                    See *elixir-ext-pipes* for more info.


                                            *:ToPipe* *elixir-ext-:ToPipe*
:ToPipe[!]          Converts a function call to an inline pipe.

                    The bang version creates a multi-line pipe.  This is
                    ignored if you are creating a nested pipe.  For example:
>
                      foo
                      |> bar(baz("biz"))
<
                    If you want to pipe `"biz"` into `baz()` it will always
                    produce:
>
                      foo
                      |> bar("biz" |> baz())
<
                    even if you use the bang version.

                    See *elixir-ext-pipes* for more info.

  vim:tw=78:et:ft=help:norl:
