*elixir-ext.txt*  Extras and extensions for *elixir*

TABLE OF CONTENTS                           *elixir-ext*

INTRODUCTION................................*elixir-ext-introduction*
EDITING.....................................*elixir-ext-editing*
NAVIGATION..................................*elixir-ext-navigation*
MIX.........................................*elixir-ext-mix*
PHOENIX.....................................*elixir-ext-phoenix*
COMMANDS....................................*elixir-ext-commands*

INTRODUCTION                                *elixir-ext-introduction*

Provides extra utilities for working with Elixir outside of elixir.vim.

EDITING                                     *elixir-ext-editing*

                                            *elixir-ext-pipes*
                    NOTE: These commands depend on *elixir.vim*

                    NOTE: These commands only work for functions called with
                    parens.  A special case is made for `case`.

                    This plugin provides two commands for manipulating pipes:
                    |:FromPipe| and |:ToPipe|.  While it's quite robust it is
                    not perfect and will need to be formatted.  This is mostly
                    only true if un-piping a multiline data-structure.

                    For example:
>
                      %{
                        bar: baz()
                      }
                      |> foo("biz")
<
                    will become:
>
                      foo(
                        %{
                          bar: baz()
                        }, "biz")
<

                    But for simplier cases it works quite well, even with more
                    complex datastructres.  It is even aware of infix
                    operators, so you can actually convert between:
>
                      1 + 1
<
                    and
>
                      1
                      |> Kernel.+()
<

PHOENIX                                     *elixir-ext-phoenix*

COMMANDS                                    *elixir-ext-commands*

:FromPipe[!]        Moves a piped argument into function parens.

                    The bang version will attempt to format.

                    See *elixir-ext-pipes* for more info.

                                            *:ToPipe* *elixir-ext-:ToPipe*
:ToPipe[!]          Converts a function call to an inline pipe.

                    The bang version creates a multi-line pipe.  This is
                    ignored if you are creating a nested pipe.  For example:
>
                      foo
                      |> bar(baz("biz"))
<
                    If you want to pipe `"biz"` into `baz()` it will always
                    produce:
>
                      foo
                      |> bar("biz" |> baz())
<
                    even if you use the bang version.

                    See *elixir-ext-pipes* for more info.

  vim:tw=78:et:ft=help:norl:
